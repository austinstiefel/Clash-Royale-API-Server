"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClanCurrentRiverRace = exports.getClanCurrentWar = exports.getClanWarlog = exports.getClanMembers = exports.getClanByTag = exports.getClans = void 0;
/**
 * NOTE From the DOCS:
 * https://developer.clashroyale.com/#/documentation
 *
 * Search all clans by name and/or filtering the results using various criteria.
 * At least one filtering criteria must be defined and if name is used as part
 * of search, it is required to be at least three characters long.
 *
 * It is not possible to specify ordering for results so clients should not
 * rely on any specific ordering as that may change in the future releases of the API.
 *
 * @param {IClanRequestParams} params
 * @param {AxiosInstance} apiClient
 */
var getClans = function (params, apiClient) { return __awaiter(void 0, void 0, void 0, function () {
    var clans;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, apiClient.get('/clans', { params: params })];
            case 1:
                clans = _a.sent();
                return [2 /*return*/, clans.data.items];
        }
    });
}); };
exports.getClans = getClans;
/**
 * Get information about a single clan by clan tag. Clan tags can be found using
 * clan search operation.
 *
 * Note that clan tags start with hash character '#' and that needs to be
 * URL-encoded properly to work in URL, so for example clan tag '#2ABC' would
 * become '%232ABC' in the URL.
 *
 * @param {string} tag
 * @param {AxiosInstance} apiClient
 */
var getClanByTag = function (tag, apiClient) { return __awaiter(void 0, void 0, void 0, function () {
    var clan;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, apiClient.get("/clans/" + encodeURIComponent(tag))];
            case 1:
                clan = _a.sent();
                return [2 /*return*/, clan.data];
        }
    });
}); };
exports.getClanByTag = getClanByTag;
/**
 * List clan members
 *
 * @param {string} tag
 * @param {AxiosInstance} apiClient
 */
var getClanMembers = function (tag, apiClient) { return __awaiter(void 0, void 0, void 0, function () {
    var members;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, apiClient.get("/clans/" + encodeURIComponent(tag) + "/members")];
            case 1:
                members = _a.sent();
                return [2 /*return*/, members.data.items];
        }
    });
}); };
exports.getClanMembers = getClanMembers;
/**
 * Retrieve clan's clan war log
 *
 * @param {string} tag
 * @param {AxiosInstance} apiClient
 */
var getClanWarlog = function (tag, apiClient) { return __awaiter(void 0, void 0, void 0, function () {
    var warLog;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, apiClient.get("/clans/" + encodeURIComponent(tag) + "/warlog")];
            case 1:
                warLog = _a.sent();
                return [2 /*return*/, warLog.data.items];
        }
    });
}); };
exports.getClanWarlog = getClanWarlog;
/**
 * Retrieve information about clan's current clan war
 *
 * Note:
 * When ICurrentWar.warEndTime is undefined, the war is still in collection.
 * Search for ICurrentWar.collectionEndTime instead
 *
 * @param {string} tag
 * @param {AxiosInstance} apiClient
 */
var getClanCurrentWar = function (tag, apiClient) { return __awaiter(void 0, void 0, void 0, function () {
    var currentWar;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, apiClient.get("/clans/" + encodeURIComponent(tag) + "/currentwar")];
            case 1:
                currentWar = _a.sent();
                return [2 /*return*/, currentWar.data];
        }
    });
}); };
exports.getClanCurrentWar = getClanCurrentWar;
/**
 * Retrieve information about clan's current river race
 *
 *
 * @param {string} tag
 * @param {AxiosInstance} apiClient
 */
var getClanCurrentRiverRace = function (tag, apiClient) { return __awaiter(void 0, void 0, void 0, function () {
    var currentRiverRace;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, apiClient.get("/clans/" + encodeURIComponent(tag) + "/currentriverrace")];
            case 1:
                currentRiverRace = _a.sent();
                return [2 /*return*/, currentRiverRace.data];
        }
    });
}); };
exports.getClanCurrentRiverRace = getClanCurrentRiverRace;
//# sourceMappingURL=clans.endpoint.js.map