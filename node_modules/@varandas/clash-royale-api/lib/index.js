"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClashRoyaleAPI = void 0;
var communications_1 = require("./communications");
var endpoints_1 = require("./endpoints");
/**
 * @namespace ClashRoyaleAPI
 *
 * @class ClashRoyaleAPI
 */
var ClashRoyaleAPI = /** @class */ (function () {
    /**
     * Initializes the axios instance with the token
     * from the developer site https://developer.clashroyale.com
     *
     * @param {string} token
     */
    function ClashRoyaleAPI(token) {
        var _this = this;
        /**
         * Get information about a single player by player tag.
         * Player tags can be found either in game or by from clan member lists.
         *
         * @param {string} tag
         */
        this.getPlayerByTag = function (tag) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getPlayerByTag(tag, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        /**
         * Get list of reward chests that the player will receive next in the game.
         *
         * @param {string} tag
         */
        this.getPlayerUpcomingChests = function (tag) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getPlayerUpcomingChests(tag, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        /**
         * Get list of recent battle results for a player.
         *
         * @param {string} tag
         */
        this.getPlayerBattleLog = function (tag) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getPlayerBattleLog(tag, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        /**
         * Search all tournaments by name.
         *
         * @param {object:ITournamentRequestParams} params
         */
        this.getTournaments = function (params) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getTournaments(params, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        /**
         * Get information about a single tournament by a tournament tag.
         *
         * @param {string} tag
         */
        this.getTournamentByTag = function (tag) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getTournamentByTag(tag, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        /**
         * List all available global tournaments.
         */
        this.getGlobalTournaments = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getGlobalTournaments(this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        this.apiClient = communications_1.getAxiosInstance(token);
    }
    /**
     * Search all clans by name and/or filtering the results using various criteria.
     *
     * @param {object:IClanRequestParams} params - Object used to filter results.
     */
    ClashRoyaleAPI.prototype.getClans = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getClans(params, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get information about a single clan by clan tag.
     * Clan tags can be found using clan search operation.
     *
     * @param {string} tag
     */
    ClashRoyaleAPI.prototype.getClanByTag = function (tag) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getClanByTag(tag, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List clan members
     *
     * @param {string} tag
     */
    ClashRoyaleAPI.prototype.getClanMembers = function (tag) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getClanMembers(tag, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieve clan's clan war log
     *
     * @param {string} tag
     */
    ClashRoyaleAPI.prototype.getClanWarlog = function (tag) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getClanWarlog(tag, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieve information about clan's current clan war
     *
     * Note:
     * When ICurrentWar.warEndTime is undefined, the war is still in collection.
     * Search for ICurrentWar.collectionEndTime instead
     *
     * @param {string} tag
     */
    ClashRoyaleAPI.prototype.getClanCurrentWar = function (tag) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getClanCurrentWar(tag, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieve information about clan's current river race
     *
     * Note:
     * When ICurrentWar.warEndTime is undefined, the war is still in collection.
     * Search for ICurrentWar.collectionEndTime instead
     *
     * @param {string} tag
     */
    ClashRoyaleAPI.prototype.getClanCurrentRiverRace = function (tag) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getClanCurrentRiverRace(tag, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get list of all available cards.
     */
    ClashRoyaleAPI.prototype.getCards = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getCards(this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List all available locations
     *
     * @param {ILocationRequestParams} params
     */
    ClashRoyaleAPI.prototype.getLocations = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getLocations(params, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get information about specific location
     *
     * @param {string} id
     * @param {ILocationFullRequestParams} params
     */
    ClashRoyaleAPI.prototype.getLocationById = function (id, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getLocationById(id, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get clan rankings for a specific location.
     *
     * @param {string} id
     * @param {ILocationFullRequestParams} params
     */
    ClashRoyaleAPI.prototype.getClanRankinsForLocation = function (id, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getClanRankingsForLocation(id, params, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get player rankings for a specific location
     *
     * @param {string} id
     * @param {ILocationFullRequestParams} params
     */
    ClashRoyaleAPI.prototype.getPlayerRankingsForLocation = function (id, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getPlayerRankingsForLocation(id, params, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get clan rankings for a specific location
     *
     * @param {string} id
     * @param {ILocationFullRequestParams} params
     */
    ClashRoyaleAPI.prototype.getClanWarRankingsForLocation = function (id, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, endpoints_1.getClanRankingsForLocation(id, params, this.apiClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ClashRoyaleAPI;
}());
exports.ClashRoyaleAPI = ClashRoyaleAPI;
//# sourceMappingURL=index.js.map